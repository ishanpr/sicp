#lang scheme
(define (next n)
  (if (even? n) (+ n 1) (+ n 2)))

; The above implementation of next is what the program was executed on and the results are for that.
;The following is a different implementation used in jots-jottings that is around the same speed or marginally slower.
;(define (next n)
;  (if (= n 2) 3 (+ n 2)))


(define (smallest-divisor n) (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))
(define (divides? a b) (= (remainder b a) 0))
(define (square x) (* x x))

(define runtime current-inexact-milliseconds)

(define (timed-prime-test n)
(newline)
(display n)
(start-prime-test n (runtime)))
(define (start-prime-test n start-time)
(if (prime? n)
(report-prime (- (runtime) start-time))
0))
(define (report-prime elapsed-time)
(display " *** ")
(display elapsed-time))

(define (prime? n)
(= n (smallest-divisor n)))

(define (search-for-primes lower upper)
  (define (iter n)
    (cond ((<= n upper) (timed-prime-test n) (iter (+ n 2)))))
  (iter (if (odd? lower) lower (+ lower 1))))



(search-for-primes 14 28)
(newline)
(search-for-primes 1000 1020)
(newline)
(search-for-primes 10000 10040)
(newline)
(search-for-primes 100000 100050)
(newline)
(search-for-primes 1000000 1000040)
(newline)
(search-for-primes 10000000000000000 10000000000000080)
(newline)
(search-for-primes 1000000000000000000 1000000000000000040)

; The outputs are as follows.
15
17 *** 0.001220703125
19 *** 0.00146484375
21
23 *** 0.001220703125
25
27

1001
1003
1005
1007
1009 *** 0.003662109375
1011
1013 *** 0.002685546875
1015
1017
1019 *** 0.002685546875

10001
10003
10005
10007 *** 0.0068359375
10009 *** 0.0068359375
10011
10013
10015
10017
10019
10021
10023
10025
10027
10029
10031
10033
10035
10037 *** 0.007080078125
10039 *** 0.00634765625

100001
100003 *** 0.017822265625
100005
100007
100009
100011
100013
100015
100017
100019 *** 0.016845703125
100021
100023
100025
100027
100029
100031
100033
100035
100037
100039
100041
100043 *** 0.016357421875
100045
100047
100049 *** 0.0166015625

1000001
1000003 *** 0.050537109375
1000005
1000007
1000009
1000011
1000013
1000015
1000017
1000019
1000021
1000023
1000025
1000027
1000029
1000031
1000033 *** 0.048583984375
1000035
1000037 *** 0.046875
1000039 *** 0.047607421875

10000000000000001
10000000000000003
10000000000000005
10000000000000007
10000000000000009
10000000000000011
10000000000000013
10000000000000015
10000000000000017
10000000000000019
10000000000000021
10000000000000023
10000000000000025
10000000000000027
10000000000000029
10000000000000031
10000000000000033
10000000000000035
10000000000000037
10000000000000039
10000000000000041
10000000000000043
10000000000000045
10000000000000047
10000000000000049
10000000000000051
10000000000000053
10000000000000055
10000000000000057
10000000000000059
10000000000000061 *** 5406.19140625
10000000000000063
10000000000000065
10000000000000067
10000000000000069 *** 5200.712646484375
10000000000000071
10000000000000073
10000000000000075
10000000000000077
10000000000000079 *** 5267.97607421875

1000000000000000001
1000000000000000003 *** 55010.836669921875
1000000000000000005
1000000000000000007
1000000000000000009 *** 52334.4169921875
1000000000000000011
1000000000000000013
1000000000000000015
1000000000000000017
1000000000000000019
1000000000000000021
1000000000000000023
1000000000000000025
1000000000000000027
1000000000000000029
1000000000000000031 *** 52353.3916015625
1000000000000000033
1000000000000000035
1000000000000000037
1000000000000000039

; Compared to Exercise 1.22, the above modified version runs not quite 2x faster but is around 1.4x faster..
; The reasons for this not quite being 2x faster could be because we replaced a primitive operation + with a user defined one.
; Primitive operations have built in optimizations to make it faster.
; Also when evaluating next the arguements are passed through the if operator to determine to evaluate the consequent or alternative, which adds complexity. 
