#lang scheme
(define runtime current-inexact-milliseconds)

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))
(define (square x) (* x x))

(define (fermat-test n)
(define (try-it a)
(= (expmod a n n) a))
(try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
(cond ((= times 0) true)
((fermat-test n) (fast-prime? n (- times 1)))
(else false)))


(define (timed-prime-test n)
(newline)
(display n)
(start-prime-test n (runtime)))
(define (start-prime-test n start-time)
(if (fast-prime? n 2500000) ;Here the times argument is initialized with such a large number is only so that the time taken to compute can be noticable enough to see a relationship. 
(report-prime (- (runtime) start-time))
0))
(define (report-prime elapsed-time)
(display " *** ")
(display elapsed-time))

; Initially my stategy was to initialize the fast-prime? procedure to only take in one argument, where "times" is initialzed within the definition of "fast-prime?"
; (define (fast-prime? n)
;  (define (iter times)
;    (cond ((= times 0) true)
;          ((fermat-test n) (iter (- times 1)))
;          (else false)))
;  (iter 3))
; This was generated by GPT tho..

(timed-prime-test 1009)
(timed-prime-test 1013)
(timed-prime-test 1019)
(timed-prime-test 10007)
(timed-prime-test 10009)
(timed-prime-test 10037)
(timed-prime-test 100003)
(timed-prime-test 100019)
(timed-prime-test 100043)
(timed-prime-test 1000003)
(timed-prime-test 1000033)
(timed-prime-test 1000037)

; The outputs are as follows
1009 *** 4062.080810546875
1013 *** 4209.29638671875
1019 *** 4465.5712890625
10007 *** 5136.07177734375
10009 *** 4970.1044921875
10037 *** 5185.84423828125
100003 *** 6843.463623046875
100019 *** 5954.3955078125
100043 *** 6528.892822265625
1000003 *** 6624.502197265625
1000033 *** 6583.13623046875
1000037 *** 6831.7001953125

; Calculating the averages of 1000s, 10000s, 100000s, and 1000000s to get the orders of growth more reliably, 
; Average 1000s - 4245
; Average 10000s - 5097
; Average 100000s - 6441
; Average 1000000s - 6679

; The expected relationships for log10000 / log1000 is 1.33 but the observed relationship is 1.2
; The expected relationships for log100000 / log1000 is 1.66 but the observed relationship is 1.5
; The expected relationships for log1000000 / log1000 is 2 but the observed relationship is 1.57


;With this you can see that the ratio reaches the expected value. (Doesn't show here, computer too fast or something)
;Eventually this will reaches the expected value and then go on to exceed it when the numbers are much larger.
;The relationship is logarithmic.

; There is an explainer on the technical and performance limitations related to implementing expmod on jots-jottings blog for this exercise.
; Apparently there is a problem with initializing the fast-prime? `times` argument with such a large number.


;(timed-prime-test 10000000000000061)
; Got the following error when I tried the above.. Don't know why 
;     random: contract violation
;     expected: (or/c (integer-in 1 4294967087) pseudo-random-generator?)
;     given: 10000000000000060